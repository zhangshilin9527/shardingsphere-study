server.port=12389

# 配置ds0 和ds1两个数据源
spring.shardingsphere.datasource.names=ds0,ds1

spring.shardingsphere.datasource.ds0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds0.url=jdbc:mysql://localhost:3306/demo_ds_1
spring.shardingsphere.datasource.ds0.username=root
spring.shardingsphere.datasource.ds0.password=root

spring.shardingsphere.datasource.ds1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds1.url=jdbc:mysql://localhost:3306/demo_ds_1
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=root

# 分库策略 根据id取模确定数据进哪个数据库
spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=USER_ID
spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=ds$->{USER_ID % 2}


# 分表策略
# 节点 ds0.test_user01,ds0.test_user02,ds1.test_user01,ds1.test_user02
spring.shardingsphere.sharding.tables.test_user.actual-data-nodes=ds$->{0..1}.test_user0$->{0..1}

# 分表字段id
spring.shardingsphere.sharding.tables.test_user.table-strategy.inline.sharding-column=ID

# 分表策略 根据id取模,确定数据最终落在那个表中
spring.shardingsphere.sharding.tables.test_user.table-strategy.inline.algorithm-expression = test_user0$->{ID % 2}

## 使用SNOWFLAKE算法生成主键
#spring.shardingsphere.sharding.tables.test_user.key-generator.column=ID
#spring.shardingsphere.sharding.tables.test_user.key-generator.type=SNOWFLAKE
#spring.shardingsphere.sharding.tables.test_user.key-generator.props.worker.id=123

#打印出sql语句
spring.shardingsphere.props.sql.show = true

mybatis.mapper-locations=classpath:mapper/*.xml
mybatis.type-aliases-package=com.xiaolinzi.shardingsphere.study.entity

